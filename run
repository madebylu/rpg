./app/Console/Commands/wsBroadcastServer.php:    $server->run();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/lib/client.js:    if (!res.headers['server-authorization'] &&
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/lib/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/node_modules/hawk/lib/browser.js:        var serverAuthorization = getHeader('server-authorization');
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/cross-spawn/node_modules/spawn-sync/node_modules/try-thread-sleep/node_modules/thread-sleep/node_modules/node-pre-gyp/node_modules/request/package.json:    "server-destroy": "~1.0.0",
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/dist/client.js:    if (!res.headers['server-authorization'] && !options.required) {
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/dist/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/lib/client.js:    if (!res.headers['server-authorization'] &&
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/lib/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/node_modules/hawk/lib/browser.js:        var serverAuthorization = getHeader('server-authorization');
./node_modules/laravel-elixir/node_modules/gulp-sass/node_modules/node-sass/node_modules/request/package.json:    "server-destroy": "^1.0.1",
./node_modules/laravel-elixir/node_modules/gulp-batch/node_modules/async-done/README.md:  - Completion: [onCompleted](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted) method called
./node_modules/laravel-elixir/node_modules/gulp-batch/node_modules/async-done/README.md:  - Error: [onError](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted) method called
./node_modules/laravel-elixir/node_modules/gulp-batch/node_modules/async-done/package.json:  "readme": "async-done\n==========\n\n[![build status](https://secure.travis-ci.org/phated/async-done.png)](http://travis-ci.org/phated/async-done)\n\nHandles completion and errors for callbacks, promises, observables, child processes and streams.\n\nWill run call the function on `nextTick`. This will cause all functions to be async.\n\n## Usage\n\n### Successful completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(null, 2);\n}, function(error, result){\n  // `error` will be null on successful execution of the first function.\n  // `result` will be the result from the first function.\n});\n```\n\n### Failed completion\n\n```js\nvar asyncDone = require('async-done');\n\nasyncDone(function(done){\n  // do async things\n  done(new Error('Some Error Occurred'));\n}, function(error, result){\n  // `error` will be an error from the first function.\n  // `result` will be undefined on failed execution of the first function.\n});\n```\n\n## API\n\n### `asyncDone(fn, callback)`\n\nTakes a function to execute (`fn`) and a function to call on completion (`callback`).\n\n#### `fn([done])`\n\nOptionally takes a callback to call when async tasks are complete.\n\n#### Completion and Error Resolution\n\n* `Callback` called\n  - Completion: called with null error\n  - Error: called with non-null error\n* `Stream` or `EventEmitter` returned\n  - Completion: [end-of-stream](https://www.npmjs.org/package/end-of-stream) module\n  - Error: [domains](http://nodejs.org/api/domain.html)\n* `Child Process` returned\n  - Completion [end-of-stream](https://www.npmjs.org/package/end-of-stream) module\n  - Error: [domains](http://nodejs.org/api/domain.html)\n* `Promise` returned\n  - Completion: [onFulfilled](http://promisesaplus.com/#point-26) method called\n  - Error: [onRejected](http://promisesaplus.com/#point-30) method called\n* `Observable` returned\n  - Completion: [onCompleted](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted) method called\n  - Error: [onError](https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypesubscribeobserver--onnext-onerror-oncompleted) method called\n\n__Warning:__ Sync tasks are __not supported__ and your function will never complete if the one of the above strategies is not used to signal completion. However, thrown errors will be caught by the domain.\n\n#### `callback(error, result)`\n\nIf an error doesn't occur in the execution of the `fn` function, the `callback` method will receive the results as its second argument. Note: Observable and some streams don't received any results.\n\nIf an error occurred in the execution of the `fn` function, The `callback` method will receive an error as its first argument.\n\nErrors can be caused by:\n\n* A thrown error\n* An error passed to a `done` callback\n* An `error` event emitted on a returned `Stream`, `EventEmitter` or `Child Process`\n* A rejection of a returned `Promise`\n* The `onError` handler being called on an `Observable`\n\n## License\n\nMIT\n",
./node_modules/laravel-elixir/node_modules/gulp-autoprefixer/node_modules/autoprefixer-core/node_modules/caniuse-db/features-json/eventsource.json:      "description":"In Firefox prior to version 36 server-sent events do not reconnect automatically in case of a connection interrupt ([bug](https://bugzilla.mozilla.org/show_bug.cgi?id=831392))"
./node_modules/laravel-elixir/node_modules/gulp-autoprefixer/node_modules/autoprefixer-core/node_modules/caniuse-db/features-json/mutationobserver.json:      "description":"IE11 does not include the child nodes, when they are removed by setting the innerHTML of an element [see bug](https://connect.microsoft.com/IE/feedback/details/817132/ie-11-childnodes-are-missing-from-mutationobserver-mutations-removednodes-after-setting-innerhtml)"
./node_modules/laravel-elixir/node_modules/gulp-coffee/test/fixtures/journo.coffee.md:The server-side path to the HTML for a given `post`.
./node_modules/laravel-elixir/node_modules/gulp-coffee/test/fixtures/journo.litcoffee:The server-side path to the HTML for a given `post`.
./node_modules/laravel-elixir/node_modules/browserify/node_modules/crypto-browserify/example/bundle.js: * the server-side, but the defaults work in most cases.
./node_modules/laravel-elixir/node_modules/browserify/node_modules/JSONStream/test/fixtures/all_npm.json:{"id":"nserver-util","key":"nserver-util","value":{"rev":"5-5e14eb0bc9f7ab0eac04c5699c6bb328"}},
./node_modules/laravel-elixir/node_modules/browserify/node_modules/JSONStream/test/fixtures/all_npm.json:{"id":"server-backbone-redis","key":"server-backbone-redis","value":{"rev":"13-c56419457002aa4fa23b142634882594"}},
./node_modules/laravel-elixir/node_modules/browserify/node_modules/JSONStream/test/fixtures/all_npm.json:{"id":"server-tracker","key":"server-tracker","value":{"rev":"21-f620e295079a8b0acd29fa1a1469100c"}},
./node_modules/laravel-elixir/node_modules/gulp-phpspec/node_modules/jshint/dist/jshint.js:     * server-side JavaScript environment that uses an asynchronous
./node_modules/laravel-elixir/node_modules/gulp-phpspec/node_modules/jshint/dist/jshint-rhino.js:     * server-side JavaScript environment that uses an asynchronous
./node_modules/laravel-elixir/node_modules/gulp-phpspec/node_modules/jshint/src/options.js:     * server-side JavaScript environment that uses an asynchronous
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/web/doc/UserInterface.html:<p><img src="images/server-home.png">
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/package.json:  "readme": "\n# Express\n      \n  Insanely fast (and small) server-side JavaScript web development framework\n  built on [node](http://nodejs.org) and [Connect](http://github.com/senchalabs/connect).\n  \n     var app = express.createServer();\n     \n     app.get('/', function(req, res){\n       res.send('Hello World');\n     });\n     \n     app.listen(3000);\n\n## Installation\n\n    $ npm install express\n\nor to access the `express(1)` executable install globally:\n\n    $ npm install -g express\n\n## Quick Start\n\n The quickest way to get started with express is to utilize the executable `express(1)` to generate an application as shown below:\n\n Create the app:\n\n    $ npm install -g express\n    $ express /tmp/foo && cd /tmp/foo\n\n Install dependencies:\n\n    $ npm install -d\n\n Start the server:\n\n    $ node app.js\n\n## Features\n\n  * Robust routing\n  * Redirection helpers\n  * Dynamic view helpers\n  * Content negotiation\n  * Focus on high performance\n  * View rendering and partials support\n  * Environment based configuration\n  * Session based flash notifications\n  * Built on [Connect](http://github.com/senchalabs/connect)\n  * High test coverage\n  * Executable for generating applications quickly\n  * Application level view options\n\nVia Connect:\n\n  * Session support\n  * Cache API\n  * Mime helpers\n  * ETag support\n  * Persistent flash notifications\n  * Cookie support\n  * JSON-RPC\n  * Logging\n  * and _much_ more!\n\n## Contributors\n\nThe following are the major contributors of Express (in no specific order).\n\n  * TJ Holowaychuk ([visionmedia](http://github.com/visionmedia))\n  * Ciaran Jessup ([ciaranj](http://github.com/ciaranj))\n  * Aaron Heckmann ([aheckmann](http://github.com/aheckmann))\n  * Guillermo Rauch ([guille](http://github.com/guille))\n\n## More Information\n\n  * #express on freenode\n  * [express-expose](http://github.com/visionmedia/express-expose) expose objects, functions, modules and more to client-side js with ease\n  * [express-configure](http://github.com/visionmedia/express-configuration) async configuration support\n  * [express-messages](http://github.com/visionmedia/express-messages) flash notification rendering helper\n  * [express-namespace](http://github.com/visionmedia/express-namespace) namespaced route support\n  * [express-params](https://github.com/visionmedia/express-params) param pre-condition functions\n  * [express-mongoose](https://github.com/LearnBoost/express-mongoose) plugin for easy rendering of Mongoose async Query results\n  * Follow [tjholowaychuk](http://twitter.com/tjholowaychuk) on twitter for updates\n  * [Google Group](http://groups.google.com/group/express-js) for discussion\n  * Visit the [Wiki](http://github.com/visionmedia/express/wiki)\n  * [日本語ドキュメンテーション](http://hideyukisaito.com/doc/expressjs/) by [hideyukisaito](https://github.com/hideyukisaito)\n  * Screencast - [Introduction](http://bit.ly/eRYu0O)\n  * Screencast - [View Partials](http://bit.ly/dU13Fx)\n  * Screencast - [Route Specific Middleware](http://bit.ly/hX4IaH)\n  * Screencast - [Route Path Placeholder Preconditions](http://bit.ly/eNqmVs)\n\n## Node Compatibility\n\nExpress 1.x is compatible with node 0.2.x and connect < 1.0.\n\nExpress 2.x is compatible with node 0.4.x or 0.6.x, and connect 1.x\n\nExpress 3.x (master) will be compatible with node 0.6.x and connect 2.x\n\n## Viewing Examples\n\nFirst install the dev dependencies to install all the example / test suite deps:\n\n    $ npm install\n\nthen run whichever tests you want:\n\n    $ node examples/jade/app.js\n\n## Running Tests\n\nTo run the test suite first invoke the following command within the repo, installing the development dependencies:\n\n    $ npm install\n\nthen run the tests:\n\n    $ make test\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2009-2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/node_modules/weinre/node_modules/express/Readme.md:  Insanely fast (and small) server-side JavaScript web development framework
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/plugins.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/server-info-snippet.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/network-throttle.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/network-throttle.html:                                        <input id="server-port" type="text" value="" placeholder="Eg: 1024" ng-model="ctrl.port" ng-focus="ctrl.portEntry = 'manual'" custom-validation="" class="ng-pristine ng-untouched ng-valid">
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/sync-options.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/components.html:                    <a href="/server-info.html" >Overview</a> <span bs-sep>|</span>
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/remote-debug.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/history.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/server-info.html:                            <a href="/server-info.html" bs-button="nav"  class="active">
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/static/help.html:                            <a href="/server-info.html" bs-button="nav" >
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/network-throttle/network-throttle.html:                        <input id="server-port"
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/browser-sync-ui/lib/plugins/network-throttle/network-throttle.html:        <ul bs-list="bordered inline-controls" bs-offset="basic" id="throttle-server-list">
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.includes/package.json:  "name": "bs-recipes-server-includes",
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/bs-recipes/recipes/server.gzipped.assets/package.json:  "name": "bs-recipes-server-with-gzipped-assets",
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/dist/client.js:    if (!res.headers['server-authorization'] && !options.required) {
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/dist/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/lib/client.js:    if (!res.headers['server-authorization'] &&
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/lib/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/node_modules/hawk/lib/browser.js:        var serverAuthorization = getHeader('server-authorization');
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/localtunnel/node_modules/request/package.json:    "server-destroy": "^1.0.1",
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/README.md:### Node.JS (server-side usage)
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/engine.io.js:  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/node_modules/engine.io-client/lib/transports/polling-jsonp.js:  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/package.json:  "readme": "\n# socket.io-client\n\n[![Build Status](https://secure.travis-ci.org/socketio/socket.io-client.svg)](http://travis-ci.org/socketio/socket.io-client)\n![NPM version](https://badge.fury.io/js/socket.io-client.svg)\n![Downloads](http://img.shields.io/npm/dm/socket.io-client.svg?style=flat)\n[![](http://slack.socket.io/badge.svg?)](http://slack.socket.io)\n\n## How to use\n\nA standalone build of `socket.io-client` is exposed automatically by the\nsocket.io server as `/socket.io/socket.io.js`. Alternatively you can\nserve the file `socket.io.js` found at the root of this repository.\n\n```html\n<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  var socket = io('http://localhost');\n  socket.on('connect', function(){});\n  socket.on('event', function(data){});\n  socket.on('disconnect', function(){});\n</script>\n```\n\nSocket.IO is compatible with [browserify](http://browserify.org/).\n\n### Node.JS (server-side usage)\n\n  Add `socket.io-client` to your `package.json` and then:\n\n  ```js\n  var socket = require('socket.io-client')('http://localhost');\n  socket.on('connect', function(){});\n  socket.on('event', function(data){});\n  socket.on('disconnect', function(){});\n  ```\n\n## API\n\n### IO(url:String, opts:Object):Socket\n\n  Exposed as the `io` namespace in the standalone build, or the result\n  of calling `require('socket.io-client')`.\n\n  When called, it creates a new `Manager` for the given URL, and attempts\n  to reuse an existing `Manager` for subsequent calls, unless the\n  `multiplex` option is passed with `false`.\n\n  The rest of the options are passed to the `Manager` constructor (see below\n  for details).\n\n  A `Socket` instance is returned for the namespace specified by the\n  pathname in the URL, defaulting to `/`. For example, if the `url` is\n  `http://localhost/users`, a transport connection will be established to\n  `http://localhost` and a Socket.IO connection will be established to\n  `/users`.\n\n### IO#protocol\n\n  Socket.io protocol revision number this client works with.\n\n### IO#Socket\n\n  Reference to the `Socket` constructor.\n\n### IO#Manager\n\n  Reference to the `Manager` constructor.\n\n### IO#Emitter\n\n  Reference to the `Emitter` constructor.\n\n### Manager(url:String, opts:Object)\n\n  A `Manager` represents a connection to a given Socket.IO server. One or\n  more `Socket` instances are associated with the manager. The manager\n  can be accessed through the `io` property of each `Socket` instance.\n\n  The `opts` are also passed to `engine.io` upon initialization of the\n  underlying `Socket`.\n\n  Options:\n  - `reconnection` whether to reconnect automatically (`true`)\n  - `reconnectionAttempts` (`Infinity`) before giving up\n  - `reconnectionDelay` how long to initially wait before attempting a new\n    reconnection (`1000`). Affected by +/- `randomizationFactor`,\n    for example the default initial delay will be between 500 to 1500ms.\n  - `reconnectionDelayMax` maximum amount of time to wait between\n    reconnections (`5000`). Each attempt increases the reconnection delay by 2x\n    along with a randomization as above\n  - `randomizationFactor` (`0.5`), 0 <= randomizationFactor <= 1\n  - `timeout` connection timeout before a `connect_error`\n    and `connect_timeout` events are emitted (`20000`)\n  - `autoConnect` by setting this false, you have to call `manager.open`\n    whenever you decide it's appropriate\n\n#### Events\n\n  - `connect_error`. Fired upon a connection error.\n    Parameters:\n      - `Object` error object\n  - `connect_timeout`. Fired upon a connection timeout.\n  - `reconnect`. Fired upon a successful reconnection.\n    Parameters:\n      - `Number` reconnection attempt number\n  - `reconnect_attempt`. Fired upon an attempt to reconnect.\n  - `reconnecting`. Fired upon an attempt to reconnect.\n    Parameters:\n      - `Number` reconnection attempt number\n  - `reconnect_error`. Fired upon a reconnection attempt error.\n    Parameters:\n      - `Object` error object\n  - `reconnect_failed`. Fired when couldn't reconnect within `reconnectionAttempts`\n  - `ping`. Fired when a ping packet is written out to the server.\n  - `pong`. Fired when a pong is received from the server.\n    Parameters:\n      - `Number` number of ms elapsed since `ping` packet (i.e.: latency).\n\nThe events above are also emitted on the individual sockets that\nreconnect that depend on this `Manager`.\n\n### Manager#reconnection(v:Boolean):Manager\n\n  Sets the `reconnection` option, or returns it if no parameters\n  are passed.\n\n### Manager#reconnectionAttempts(v:Boolean):Manager\n\n  Sets the `reconnectionAttempts` option, or returns it if no parameters\n  are passed.\n\n### Manager#reconnectionDelay(v:Boolean):Manager\n\n  Sets the `reconectionDelay` option, or returns it if no parameters\n  are passed.\n\n### Manager#reconnectionDelayMax(v:Boolean):Manager\n\n  Sets the `reconectionDelayMax` option, or returns it if no parameters\n  are passed.\n\n### Manager#timeout(v:Boolean):Manager\n\n  Sets the `timeout` option, or returns it if no parameters\n  are passed.\n\n### Socket\n\n#### Socket#id:String\n\nA property on the `socket` instance that is equal to the underlying engine.io socket id.\n\nThe property is present once the socket has connected, is removed when the socket disconnects and is updated if the socket reconnects.\n\n#### Socket#compress(v:Boolean):Socket\n\n  Sets a modifier for a subsequent event emission that the event data will\n  only be _compressed_ if the value is `true`. Defaults to `true` when you don't call the method.\n\n  ```js\n  socket.compress(false).emit('an event', { some: 'data' });\n  ```\n\n#### Events\n\n  - `connect`. Fired upon a connection including a successful reconnection.\n  - `error`. Fired upon a connection error\n    Parameters:\n      - `Object` error data\n  - `disconnect`. Fired upon a disconnection.\n  - `reconnect`. Fired upon a successful reconnection.\n    Parameters:\n      - `Number` reconnection attempt number\n  - `reconnect_attempt`. Fired upon an attempt to reconnect.\n  - `reconnecting`. Fired upon an attempt to reconnect.\n    Parameters:\n      - `Number` reconnection attempt number\n  - `reconnect_error`. Fired upon a reconnection attempt error.\n    Parameters:\n      - `Object` error object\n  - `reconnect_failed`. Fired when couldn't reconnect within `reconnectionAttempts`\n\n## License\n\n[MIT](/LICENSE)\n",
./node_modules/laravel-elixir/node_modules/browser-sync/node_modules/socket.io/node_modules/socket.io-client/socket.io.js:  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
./node_modules/laravel-elixir/node_modules/watchify/node_modules/browserify/node_modules/crypto-browserify/example/bundle.js: * the server-side, but the defaults work in most cases.
./node_modules/laravel-elixir/node_modules/watchify/node_modules/browserify/node_modules/JSONStream/test/fixtures/all_npm.json:{"id":"nserver-util","key":"nserver-util","value":{"rev":"5-5e14eb0bc9f7ab0eac04c5699c6bb328"}},
./node_modules/laravel-elixir/node_modules/watchify/node_modules/browserify/node_modules/JSONStream/test/fixtures/all_npm.json:{"id":"server-backbone-redis","key":"server-backbone-redis","value":{"rev":"13-c56419457002aa4fa23b142634882594"}},
./node_modules/laravel-elixir/node_modules/watchify/node_modules/browserify/node_modules/JSONStream/test/fixtures/all_npm.json:{"id":"server-tracker","key":"server-tracker","value":{"rev":"21-f620e295079a8b0acd29fa1a1469100c"}},
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/dist/client.js:    if (!res.headers['server-authorization'] && !options.required) {
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/dist/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/client.js:                    'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/index.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts, { payload: 'some reply', contentType: 'text/plain', ext: 'response-specific' });
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                res.headers['server-authorization'] = Hawk.server.header(credentials2, artifacts);
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                expect(res.headers['server-authorization']).to.exist();
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="abc", bad="xyz"'
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="_IJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/test/browser.js:                        'server-authorization': 'Hawk mac="XIJRsMl/4oL+nn+vKoeVZPdCHXB4yJkNnBbTbHFZUYE=", hash="f9cDF/TDm7TkYRLnGwRMfeDzT6LixQVLvrIKhh0vgmM=", ext="response-specific"'
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/lib/client.js:    if (!res.headers['server-authorization'] &&
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/lib/client.js:    var attributes = Utils.parseAuthorizationHeader(res.headers['server-authorization'], ['mac', 'ext', 'hash']);
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/node_modules/hawk/lib/browser.js:        var serverAuthorization = getHeader('server-authorization');
./node_modules/laravel-elixir/node_modules/gulp-less/node_modules/less/node_modules/request/package.json:    "server-destroy": "^1.0.1",
./node_modules/laravel-elixir/node_modules/vueify/node_modules/autoprefixer/node_modules/caniuse-db/features-json/eventsource.json:      "description":"In Firefox prior to version 36 server-sent events do not reconnect automatically in case of a connection interrupt ([bug](https://bugzilla.mozilla.org/show_bug.cgi?id=831392))"
./node_modules/laravel-elixir/node_modules/vueify/node_modules/autoprefixer/node_modules/caniuse-db/features-json/mutationobserver.json:      "description":"IE11 does not include the child nodes, when they are removed by setting the innerHTML of an element [see bug](https://connect.microsoft.com/IE/feedback/details/817132/ie-11-childnodes-are-missing-from-mutationobserver-mutations-removednodes-after-setting-innerhtml)"
./node_modules/laravel-elixir/node_modules/vueify/node_modules/html-minifier/node_modules/clean-css/package.json:    "server-destroy": "1.x",
./node_modules/laravel-elixir/node_modules/gulp-minify-css/node_modules/clean-css/package.json:    "server-destroy": "1.x",
./wsBroadcastServer.php:    $server->run();
./vendor/react/socket/tests/ServerTest.php:        $this->server->listen(0);
./vendor/react/socket/tests/ServerTest.php:        $this->port = $this->server->getPort();
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', $this->expectCallableOnce());
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', $this->expectCallableExactly(3));
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', function ($conn) use ($mock) {
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', function ($conn) use ($mock) {
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', function ($conn) use ($mock) {
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', function ($conn) use ($mock) {
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', function ($conn) use ($mock) {
./vendor/react/socket/tests/ServerTest.php:        $this->server->on('connection', function ($conn) use ($mock) {
./vendor/react/socket/tests/ServerTest.php:            $this->server->shutdown();
./vendor/react/socket/tests/ConnectionTest.php:        $server->listen(0);
./vendor/react/socket/tests/ConnectionTest.php:        $client = stream_socket_client('tcp://localhost:' . $server->getPort());
./vendor/react/socket/tests/ConnectionTest.php:        $servConn = new Connection($server->master, $loop);
./vendor/react/socket/tests/ConnectionTest.php:        $server->on('connection', function ($conn) use ($mock) {
./vendor/swiftmailer/swiftmailer/doc/sending.rst:the network/internet) it's extremely portable from server-to-server. You can
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onOpen($mockConn);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $headers);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onOpen($mockConn);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $headers);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $body . $this->_crlf . $this->_crlf);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onOpen($mockConn);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $headers);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $body1);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $body2);
./vendor/cboden/ratchet/tests/unit/WebSocket/Version/Hixie76Test.php:        $server->onMessage($mockConn, $this->_crlf . $this->_crlf);
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->loop->tick();
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->loop->tick();
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->loop->tick();
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->loop->tick();
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->loop->tick();
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->loop->tick();
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->handleError($err, $conn);
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->handleConnect($conn);
./vendor/cboden/ratchet/tests/unit/Server/IoServerTest.php:        $this->server->handleData('f', $conn);
./vendor/cboden/ratchet/tests/autobahn/bin/fuzzingserver.php:    $server->run();
./vendor/cboden/ratchet/tests/autobahn/bin/fuzzingserver-noutf8.php:    $server->run();
./vendor/cboden/ratchet/src/Ratchet/App.php:        $this->_server->run();
./vendor/cboden/ratchet/Makefile:	ulimit -n 2048 && php tests/autobahn/bin/fuzzingserver-noutf8.php 8003 StreamSelect &
./vendor/vlucas/phpdotenv/README.md:$s3_bucket = $request->server->get('S3_BUCKET');
./vendor/symfony/http-foundation/ApacheRequest.php:        return $this->server->get('REQUEST_URI');
./vendor/symfony/http-foundation/ApacheRequest.php:        $baseUrl = $this->server->get('SCRIPT_NAME');
./vendor/symfony/http-foundation/ApacheRequest.php:        if (false === strpos($this->server->get('REQUEST_URI'), $baseUrl)) {
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTPS', true);
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTP_USER_AGENT', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)');
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTP_USER_AGENT', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/6.0)');
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTP_USER_AGENT', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 7.1; Trident/5.0)');
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTPS', false);
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTP_USER_AGENT', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)');
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTPS', true);
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTP_USER_AGENT', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.60 Safari/537.17');
./vendor/symfony/http-foundation/Tests/ResponseTestCase.php:        $request->server->set('HTTPS', false);
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('QUERY_STRING', $query);
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('QUERY_STRING', '');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '1.1.1.1');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '1.1.1.1');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '1.1.1.1');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '1.1.1.1');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '1.1.1.1');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $this->assertEquals('bar5', $request->server->get('foo5'), '::fromGlobals() uses values from $_SERVER');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '1.1.1.1');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $this->assertEquals('foo=bar', $request->server->get('QUERY_STRING'));
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('REMOTE_ADDR', '3.3.3.3');
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->replace($server);
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $subRequest = Request::create($subRequestUri, 'get', array(), array(), array(), $request->server->all());
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('HTTPS', true);
./vendor/symfony/http-foundation/Tests/RequestTest.php:        $request->server->set('HTTPS', false);
./vendor/symfony/http-foundation/Tests/StreamedResponseTest.php:        $request->server->set('SERVER_PROTOCOL', 'HTTP/1.1');
./vendor/symfony/http-foundation/Tests/StreamedResponseTest.php:        $request->server->set('SERVER_PROTOCOL', 'HTTP/1.0');
./vendor/symfony/http-foundation/Tests/ApacheRequestTest.php:        $request->server->replace($server);
./vendor/symfony/http-foundation/Tests/ResponseTest.php:        $request->server->set('SERVER_PROTOCOL', 'HTTP/1.0');
./vendor/symfony/http-foundation/Tests/ResponseTest.php:        $request->server->set('SERVER_PROTOCOL', 'HTTP/1.1');
./vendor/symfony/http-foundation/BinaryFileResponse.php:        if ('HTTP/1.0' != $request->server->get('SERVER_PROTOCOL')) {
./vendor/symfony/http-foundation/Request.php:        $this->headers = new HeaderBag($this->server->getHeaders());
./vendor/symfony/http-foundation/Request.php:            && in_array(strtoupper($request->server->get('REQUEST_METHOD', 'GET')), array('PUT', 'DELETE', 'PATCH'))
./vendor/symfony/http-foundation/Request.php:            $dup->headers = new HeaderBag($dup->server->getHeaders());
./vendor/symfony/http-foundation/Request.php:            sprintf('%s %s %s', $this->getMethod(), $this->getRequestUri(), $this->server->get('SERVER_PROTOCOL'))."\r\n".
./vendor/symfony/http-foundation/Request.php:        $this->server->set('QUERY_STRING', static::normalizeQueryString(http_build_query($this->query->all(), null, '&')));
./vendor/symfony/http-foundation/Request.php:        $_SERVER = $this->server->all();
./vendor/symfony/http-foundation/Request.php:        $ip = $this->server->get('REMOTE_ADDR');
./vendor/symfony/http-foundation/Request.php:        return $this->server->get('SCRIPT_NAME', $this->server->get('ORIG_SCRIPT_NAME', ''));
./vendor/symfony/http-foundation/Request.php:        return $this->server->get('SERVER_PORT');
./vendor/symfony/http-foundation/Request.php:        $qs = static::normalizeQueryString($this->server->get('QUERY_STRING'));
./vendor/symfony/http-foundation/Request.php:        $https = $this->server->get('HTTPS');
./vendor/symfony/http-foundation/Request.php:            if (!$host = $this->server->get('SERVER_NAME')) {
./vendor/symfony/http-foundation/Request.php:                $host = $this->server->get('SERVER_ADDR', '');
./vendor/symfony/http-foundation/Request.php:        $this->server->set('REQUEST_METHOD', $method);
./vendor/symfony/http-foundation/Request.php:            $this->method = strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
./vendor/symfony/http-foundation/Request.php:        return strtoupper($this->server->get('REQUEST_METHOD', 'GET'));
./vendor/symfony/http-foundation/Request.php:            $this->server->remove('HTTP_X_ORIGINAL_URL');
./vendor/symfony/http-foundation/Request.php:            $this->server->remove('UNENCODED_URL');
./vendor/symfony/http-foundation/Request.php:            $this->server->remove('IIS_WasUrlRewritten');
./vendor/symfony/http-foundation/Request.php:        } elseif ($this->server->get('IIS_WasUrlRewritten') == '1' && $this->server->get('UNENCODED_URL') != '') {
./vendor/symfony/http-foundation/Request.php:            $requestUri = $this->server->get('UNENCODED_URL');
./vendor/symfony/http-foundation/Request.php:            $this->server->remove('UNENCODED_URL');
./vendor/symfony/http-foundation/Request.php:            $this->server->remove('IIS_WasUrlRewritten');
./vendor/symfony/http-foundation/Request.php:        } elseif ($this->server->has('REQUEST_URI')) {
./vendor/symfony/http-foundation/Request.php:            $requestUri = $this->server->get('REQUEST_URI');
./vendor/symfony/http-foundation/Request.php:        } elseif ($this->server->has('ORIG_PATH_INFO')) {
./vendor/symfony/http-foundation/Request.php:            $requestUri = $this->server->get('ORIG_PATH_INFO');
./vendor/symfony/http-foundation/Request.php:            if ('' != $this->server->get('QUERY_STRING')) {
./vendor/symfony/http-foundation/Request.php:                $requestUri .= '?'.$this->server->get('QUERY_STRING');
./vendor/symfony/http-foundation/Request.php:            $this->server->remove('ORIG_PATH_INFO');
./vendor/symfony/http-foundation/Request.php:        $this->server->set('REQUEST_URI', $requestUri);
./vendor/symfony/http-foundation/Request.php:        $filename = basename($this->server->get('SCRIPT_FILENAME'));
./vendor/symfony/http-foundation/Request.php:        if (basename($this->server->get('SCRIPT_NAME')) === $filename) {
./vendor/symfony/http-foundation/Request.php:            $baseUrl = $this->server->get('SCRIPT_NAME');
./vendor/symfony/http-foundation/Request.php:        } elseif (basename($this->server->get('PHP_SELF')) === $filename) {
./vendor/symfony/http-foundation/Request.php:            $baseUrl = $this->server->get('PHP_SELF');
./vendor/symfony/http-foundation/Request.php:        } elseif (basename($this->server->get('ORIG_SCRIPT_NAME')) === $filename) {
./vendor/symfony/http-foundation/Request.php:            $baseUrl = $this->server->get('ORIG_SCRIPT_NAME'); // 1and1 shared hosting compatibility
./vendor/symfony/http-foundation/Request.php:            $path = $this->server->get('PHP_SELF', '');
./vendor/symfony/http-foundation/Request.php:            $file = $this->server->get('SCRIPT_FILENAME', '');
./vendor/symfony/http-foundation/Request.php:        $filename = basename($this->server->get('SCRIPT_FILENAME'));
./vendor/symfony/http-foundation/Request.php:        return self::$trustedProxies && IpUtils::checkIp($this->server->get('REMOTE_ADDR'), self::$trustedProxies);
./vendor/symfony/http-foundation/Response.php:        if ('HTTP/1.0' != $request->server->get('SERVER_PROTOCOL')) {
./vendor/symfony/http-foundation/Response.php:        if (false !== stripos($this->headers->get('Content-Disposition'), 'attachment') && preg_match('/MSIE (.*?);/i', $request->server->get('HTTP_USER_AGENT'), $match) == 1 && true === $request->isSecure()) {
./vendor/symfony/http-kernel/EventListener/FragmentListener.php:        if ($this->signer->check($request->getSchemeAndHttpHost().$request->getBaseUrl().$request->getPathInfo().(null !== ($qs = $request->server->get('QUERY_STRING')) ? '?'.$qs : ''))) {
./vendor/symfony/http-kernel/Tests/HttpCache/HttpCacheTest.php:        $this->assertEquals('127.0.0.1', $this->kernel->getBackendRequest()->server->get('REMOTE_ADDR'));
./vendor/symfony/http-kernel/Tests/Fragment/InlineFragmentRendererTest.php:        $subRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');
./vendor/symfony/http-kernel/Tests/Fragment/InlineFragmentRendererTest.php:            $expectedSubRequest->server->set('HTTP_X_FORWARDED_FOR', '127.0.0.1');
./vendor/symfony/http-kernel/Tests/DataCollector/TimeDataCollectorTest.php:        $request->server->set('REQUEST_TIME', 1);
./vendor/symfony/http-kernel/Tests/DataCollector/TimeDataCollectorTest.php:        $request->server->set('REQUEST_TIME_FLOAT', 2);
./vendor/symfony/http-kernel/Tests/DataCollector/TimeDataCollectorTest.php:        $request->server->set('REQUEST_TIME', 1);
./vendor/symfony/http-kernel/HttpCache/Esi.php:        $subRequest = Request::create($uri, 'get', array(), $cache->getRequest()->cookies->all(), array(), $cache->getRequest()->server->all());
./vendor/symfony/http-kernel/HttpCache/HttpCache.php:                        $subRequest = Request::create($uri, 'get', array(), array(), array(), $request->server->all());
./vendor/symfony/http-kernel/HttpCache/HttpCache.php:            $request->headers->set('X-Forwarded-For', $forwardedFor.', '.$request->server->get('REMOTE_ADDR'));
./vendor/symfony/http-kernel/HttpCache/HttpCache.php:            $request->headers->set('X-Forwarded-For', $request->server->get('REMOTE_ADDR'));
./vendor/symfony/http-kernel/HttpCache/HttpCache.php:        $request->server->set('REMOTE_ADDR', '127.0.0.1');
./vendor/symfony/http-kernel/HttpCache/Ssi.php:        $subRequest = Request::create($uri, 'get', array(), $cache->getRequest()->cookies->all(), array(), $cache->getRequest()->server->all());
./vendor/symfony/http-kernel/Fragment/InlineFragmentRenderer.php:        $server = $request->server->all();
./vendor/symfony/http-kernel/DataCollector/TimeDataCollector.php:            $startTime = $request->server->get('REQUEST_TIME_FLOAT', $request->server->get('REQUEST_TIME'));
./vendor/symfony/http-kernel/DataCollector/RequestDataCollector.php:            'request_server' => $request->server->all(),
./vendor/symfony/routing/RequestContext.php:        $this->setQueryString($request->server->get('QUERY_STRING', ''));
./vendor/laravel/framework/src/Illuminate/Foundation/Providers/FormRequestServiceProvider.php:            $current->cookies->all(), $files, $current->server->all(), $current->getContent()
./vendor/laravel/framework/src/Illuminate/Http/Request.php:            $request->cookies->all(), $request->files->all(), $request->server->all()
./.git/hooks/post-update.sample:exec git update-server-info
